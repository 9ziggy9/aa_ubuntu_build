* Ziggy's Ubuntu Build for AppAcademy
This (hopefully) short tutorial is intended as a guide to setting up a simple development environment in Ubuntu Linux compatible with AppAcademy's curriculum. *THIS GUIDE IS OFFERED WITH ABSOLUTELY ZERO WARRANTY AND I AM NOT RESPONSIBLE FOR ANYTHING YOU BRICK/DESTROY/ANNIHILATE/RENDER UNUSABLE.* That said, if you find yourself in trouble, feel free to submit an issue to this repo and I'll try to get back to you in a timely manner. :)
** Creating Bootable Installation Media
In Windows, acquire "balenaEtcher" and the non-LTS Ubuntu installation image. balenaEtcher is extremely easy to use, simply provide Ubuntu ISO image and desired drive to flash and voila. *WARNING:* whenever flashing any sort of storage media, be sure that it is the one you *intend to target*. That is, be absolutely certain that you have provided the flask drive path and not your filesystem!
*** Links
- https://www.balena.io/etcher/
- https://ubuntu.com/#download (21.10 at the time of this tutorial)
** BIOS configuration and BOOT priorities
*** Entering BIOS configuration
Now that you have your bootable disk media, you will want to reboot your machine and enter BIOS configuration. To do this on a typical machine, one interrupts the boot process by hitting their associated BIOS setup key before system startup of operating system can be reached. Sometimes we do not know what key is necessary to enter BIOS. To solve this:
**** The realistic way:
As system is starting, as soon as you see the logo screen (DELL, ASUS, HP, etc...) start repeatedly pressing your F keys. If you've mashed sufficiently, you should be directed to a prompt asking you to enter BIOS setup, or you may simply be directed there.
**** The professional way:
Given your machine model/make, look up the corresponding BIOS configuration key.
Typical BIOS configuration keys are:
- Esc
- F2, F12, F8, etc...
*** Setting BOOT priorities
Now that you are in your BIOS configuration, you will want to navigate to a section which details the order in which disks are booted in. Typically, BIOS utilities have tabs at the top and one in particular labeled "BOOT". What you should see is an ordered list, with your HDD at slot 1.
If you look at the bottom of the boot menu, you should see some indication of how to promote media in this list. Typically this is done with -/+.
Navigate to your installation media in the ordered list, (i.e. the USB flash drive), then promote it to the top of the list.
Look for the save/exit command. Typically it is F9. Confirm the changes and upon reboot, if all has gone well, you should be booted into the Ubuntu installation!
If this seems confusing or these directions do not quite match with the reality of your system, you may have to independently research a solution. I am providing the link to this YouTube video to help you better visualize what this process looks like. *If you are at all confused, please reference this before moving forward!*
- https://www.youtube.com/watch?v=9GblKZO-smU
*** SECURE BOOT WARNING and general troubleshooting
Many newer machines which target the Windows operating system have an additional UEFI feature called /secure boot/, this feature can at times interfere with the Linux bootstrapping process. If you find yourself unable to boot into the Linux installation environment, the first thing you should try is disabling this feature in BIOS. You should be able to find it trivially, but there are also resources online for most hardware if you care to look.
** Ubuntu Installation
Ubuntu Linux is EXTREMELY easy to install. For the most part, this process is just following prompts. When prompted with the GRUB boot manager, simply select first option with enter. You should be directed to installation page, select "Install Ubuntu" and proceed.  A few notes as you are going through this process:
- since we are not attempting a dual-booted system, *after this installation process is complete, Windows will no longer exist on your system and all data on the disk with be irrevocably destroyed.* _I AM NOT RESPONSIBLE FOR YOUR LOST DATA :)_
- I highly recommend choosing the "Install third-party software for graphics and Wi-Fi hardware and additional media formats" option in the *Updates and other software* menu, as this will ensure any proprietary drivers needed for your system will be included.
- After you have selected installation type, i.e. *Erase disk and install Ubuntu* and hit "Install Now", there is no turning back. So think very carefully before your proceed at this juncture.  
** Ubuntu configuration
After you have removed your installation media and rebooted, you will probably want to re-enter your BIOS and return BOOT priorities to their previous setting. Nevertheless, upon system boot, you should now be directed to your fresh Ubuntu system. Enter your password and we now get to the real stuff.
*** Package Management Notes
You will initially be prompted with a GUI interface which will allow you to select packages for installation. I am going to *STRONGLY* recommend that you do *NOT* use this method of package management. We are developers and to avoid the use of the robust Linux command line in favor of something geared towards non-developers is silly. At this moment, I should explain a little bit about package management in Ubuntu.
**** Package Managers
There are *many* ways to acquire software on Ubuntu. I will give a brief overview of the core utilities.
- *apt* is the main package management system of not only Ubuntu, but all Debian derivatives. Typical open source software which is developed with linux in mind will exist in the Ubuntu repositories and will be accessible with a simple
  #+begin_src shell
sudo apt install <package_name>
  #+end_src
- *snaps* are a containerized installation method which is typically used in cases where the software in question is targetting proprietary and/or more mainstream operating systems. Snaps are useful in cases where changes in dependencies (i.e. dynamic linking of systems libraries) have the potential to break Linux compatibility. Essentially the way they work is that all dependencies needed in order to provide a stable package are bundled together with the target software itself within a container. This will increase the space footprint of the given software, but will ensure that system upgrades will NOT break any dependencies and render the software unusable. Think of softwares like VSCode, zoom, slack, etc... If the software is not intended as FOSS, you most likely will be performing a snap installation. Snap packages are typically installed via
  #+begin_src shell
sudo snap install <package_name>
#+end_src
  although at current time, so called "classic" confinement is often needed. We do this by simply supplying the "classic" flag
  #+begin_src shell
sudo snap install --classic <package_name>
  #+end_src 
- *dpkg* is the core package installation utility of Debian and it's derivatives, /there be dragons here/. Whenever encountering installation instructions that recommend the usage of dpkg on provided .deb packages, we should EXERCISE EXTREME CAUTION. The reason being, Ubuntu and other distributions that lean heavily on apt do so to avoid what is known as *dependency hell*, a situation one can find themself in when they look to manually provide software support. For the most part, stay away from this unless you know precisely what you are doing and have an intimate knowledge of the versioning of your system software.
- *other methods* are installations which involve the use of direct compilation, provided build scripts, or other means which involve the raw targeting of bin directories. Typically, we will encounter these types of installations as instructions from a git repository or in the building of our own software. 99% of the time, when we want some software which is not included in official repositories, the given application's relevant installation instructions will be included in their repository. At some point in this tutorial, we will see an example of this in the installation of some additional zsh features. It should be noted that the raw management of dependencies as with dpkg can present issues with such softwares but more often than not, we seek to install lightweight freestanding software in this fashion.
